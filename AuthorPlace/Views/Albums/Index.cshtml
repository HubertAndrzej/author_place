@model AlbumListViewModel
@inject IAuthorizationService authorizationService
@{
    AuthorizationPolicy authorizationPolicy = new AuthorizationPolicyBuilder().RequireRole(nameof(Role.Author)).Build();
    AuthorizationResult roleResult = await authorizationService.AuthorizeAsync(User, authorizationPolicy);
    bool canCreate = roleResult.Succeeded;
}
<div class="row">
    <div class="col-md-9">
        <h1>
            @ViewBag.Title
            @if (canCreate)
            {
                <a class="btn btn-outline-info btn-sm" asp-action="New"><i class="fa-solid fa-plus"></i> Create new</a>
            }
        </h1>
    </div>
    <div class="col-md-3 d-flex align-items-center">
        <form asp-controller="Albums" asp-action="Index" method="get">
            <div class="input-group">
                <input type="text" class="form-control input" name="search" value="@Model.Input!.Search" placeholder="Search..." />
                <button class="btn btn-outline-info"><i class="fa-solid fa-magnifying-glass"></i></button>
            </div>
        </form>
    </div>
</div>
<div class="row my-3">
    <div class="col-md-1"></div>
    <div class="col-md-5"><order-link order-by="Title" Input="@Model.Input">Title </order-link></div>
    <div class="col-md-2"><order-link order-by="Rating" Input="@Model.Input">Rating </order-link></div>
    <div class="col-md-2"><order-link order-by="CurrentPrice" Input="@Model.Input">Price </order-link></div>
    <div class="col-md-2"></div>
</div>
@foreach (AlbumViewModel album in Model.Albums!.Results!)
{
    <partial name="Albums/_AlbumLine" model="@album" />
}
@if (Model.Albums!.Results!.Count != 0)
{
    <hr>
}
else
{
    <br>
    <p class="text-center text-muted">No albums existing</p>
    <br>
}
<vc:pagination-bar model="@Model"></vc:pagination-bar>